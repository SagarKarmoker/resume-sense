// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  clerkId   String   @unique // For Clerk authentication
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resumes   Resume[]
  analyses  Analysis[]
  matches   JobMatch[]

  @@map("users")
}

model Resume {
  id          String   @id @default(cuid())
  userId      String
  fileName    String
  fileKey     String   @unique // S3 key
  fileUrl     String?
  fileSize    Int
  fileType    String
  status      ResumeStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses   Analysis[]
  matches    JobMatch[]

  @@map("resumes")
}

model Analysis {
  id          String   @id @default(cuid())
  resumeId    String
  userId      String
  type        AnalysisType
  result      Json     // Store analysis results as JSON
  score       Float?   // Overall score if applicable
  status      AnalysisStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analyses")
}

model JobMatch {
  id          String   @id @default(cuid())
  resumeId    String
  userId      String
  jobTitle    String
  company     String
  jobUrl      String?
  matchScore  Float
  skills      String[] // Array of matching skills
  description String?
  location    String?
  salary      String?
  status      JobMatchStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_matches")
}

// Enums
enum ResumeStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum AnalysisType {
  SKILLS_EXTRACTION
  EXPERIENCE_ANALYSIS
  EDUCATION_ANALYSIS
  OVERALL_ASSESSMENT
  JOB_COMPATIBILITY
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum JobMatchStatus {
  ACTIVE
  APPLIED
  INTERESTED
  NOT_INTERESTED
  ARCHIVED
}
